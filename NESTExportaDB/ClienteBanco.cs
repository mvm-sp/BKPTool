using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql;
using MySql.Data.MySqlClient;
using Npgsql;



namespace NESTExportaDB
{
	public class ClienteBanco
	{
		#region Public-Members

		/// <summary>
		/// The connection string used to connect to the database server.
		/// </summary>
		public string ConnectionString { get; private set; }

		/// <summary>
		/// Enable or disable console logging of raw queries generated by the library.
		/// </summary>
		public bool DebugRawQuery = false;

		/// <summary>
		/// Enable or disable console logging of returned row counts for successful queries run by the library.
		/// </summary>
		public bool DebugResultRowCount = false;

		public List<Tabela> Tabelas
		{
			get { return mTabelas; }

		}

		#endregion

		#region Private-Members

		private bool _Disposed = false;

		private DbTypes _DbType;
		private string _ServerIp;
		private int _ServerPort;
		private string _Username;
		private string _Password;
		private string _Instance;
		private string _DatabaseName;

		private readonly object _LoadingTablesLock = new object();
		private ListaConcorrente<string> _TableNames = new ListaConcorrente<string>();
		private ConcurrentDictionary<string, List<Coluna>> _TableDetails = new ConcurrentDictionary<string, List<Coluna>>();

		private Random _Random = new Random();
		private List<Tabela> mTabelas = new List<Tabela>();
		private List<Procedure> mProcedures = new List<Procedure>();
		#endregion

		#region Constructors-and-Factories

		/// <summary>
		/// Create an instance of the database client.
		/// </summary>
		/// <param name="dbType">The type of database.</param>
		/// <param name="serverIp">The IP address or hostname of the database server.</param>
		/// <param name="serverPort">The TCP port of the database server.</param>
		/// <param name="username">The username to use when authenticating with the database server.</param>
		/// <param name="password">The password to use when authenticating with the database server.</param>
		/// <param name="instance">The instance on the database server (for use with Microsoft SQL Server).</param>
		/// <param name="database">The name of the database with which to connect.</param>
		public ClienteBanco(
				DbTypes dbType,
				string serverIp,
				int serverPort,
				string username,
				string password,
				string instance,
				string database)
		{
			//
			// MsSql, MySql, and PostgreSql will use server IP, port, username, password, database
			// Sqlite will use just database and it should refer to the database file
			//
			if (String.IsNullOrEmpty(serverIp)) throw new ArgumentNullException(nameof(serverIp));
			if (serverPort < 0) throw new ArgumentOutOfRangeException(nameof(serverPort));
			if (String.IsNullOrEmpty(database)) throw new ArgumentNullException(nameof(database));

			_DbType = dbType;
			_ServerIp = serverIp;
			_ServerPort = serverPort;
			_Username = username;
			_Password = password;
			_Instance = instance;
			_DatabaseName = database;

			PopulaConnectionString();
			CarregaTabelas();
			CarregaDetalhesTabela();
			CarregaProcedures();
		}

		/// <summary>
		/// Create an instance of the database client.
		/// </summary>
		/// <param name="dbType">The type of database.</param>
		/// <param name="serverIp">The IP address or hostname of the database server.</param>
		/// <param name="serverPort">The TCP port of the database server.</param>
		/// <param name="username">The username to use when authenticating with the database server.</param>
		/// <param name="password">The password to use when authenticating with the database server.</param>
		/// <param name="instance">The instance on the database server (for use with Microsoft SQL Server).</param>
		/// <param name="database">The name of the database with which to connect.</param>
		public ClienteBanco(
				string dbType,
				string serverIp,
				int serverPort,
				string username,
				string password,
				string instance,
				string database)
		{
			//
			// MsSql, MySql, and PostgreSql will use server IP, port, username, password, database
			// Sqlite will use just database and it should refer to the database file
			//
			if (String.IsNullOrEmpty(serverIp)) throw new ArgumentNullException(nameof(serverIp));
			if (serverPort < 0) throw new ArgumentOutOfRangeException(nameof(serverPort));
			if (String.IsNullOrEmpty(database)) throw new ArgumentNullException(nameof(database));
			if (String.IsNullOrEmpty(dbType)) throw new ArgumentNullException(nameof(dbType));

			switch (dbType.ToLower())
			{
				case "mssql":
					_DbType = DbTypes.MsSql;
					break;

				case "mysql":
					_DbType = DbTypes.MySql;
					break;

				case "pgsql":
					_DbType = DbTypes.PgSql;
					break;

				default:
					throw new ArgumentOutOfRangeException(nameof(dbType));
			}

			_ServerIp = serverIp;
			_ServerPort = serverPort;
			_Username = username;
			_Password = password;
			_Instance = instance;
			_DatabaseName = database;

			PopulaConnectionString();
			CarregaTabelas();
			CarregaDetalhesTabela();
		
		}

		#endregion

		#region Public-Methods

		/// <summary>
		/// Tear down the client and dispose of resources.
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}


		/// <summary>
		/// Show the columns and column metadata from a specific table.
		/// </summary>
		/// <param name="tableName">The table to view.</param>
		/// <returns>A list of column objects.</returns>
		public List<Coluna> DetalheTabela(string tableName)
		{
			if (String.IsNullOrEmpty(tableName)) throw new ArgumentNullException(nameof(tableName));

			List<Coluna> details;
			if (_TableDetails.TryGetValue(tableName, out details))
			{
				return details;
			}
			else
			{
				throw new Exception("Table " + tableName + " is not in the tables list");
			}
		}

		/// <summary>
		/// Retrieve the name of the primary key column from a specific table.
		/// </summary>
		/// <param name="tableName">The table of which you want the primary key.</param>
		/// <returns>A string containing the column name.</returns>
		public string ChavePrimaria(string tableName)
		{
			if (String.IsNullOrEmpty(tableName)) throw new ArgumentNullException(nameof(tableName));

			List<Coluna> details;
			if (_TableDetails.TryGetValue(tableName, out details))
			{
				if (details != null && details.Count > 0)
				{
					foreach (Coluna c in details)
					{
						if (c.IsPrimaryKey) return c.Name;
					}
				}

				throw new Exception("Unable to find primary key for table " + tableName);
			}
			else
			{
				throw new Exception("Table " + tableName + " is not in the tables list");
			}
		}

		/// <summary>
		/// Retrieve a list of the names of columns from within a specific table.
		/// </summary>
		/// <param name="tableName">The table of which ou want to retrieve the list of columns.</param>
		/// <returns>A list of strings containing the column names.</returns>
		public List<string> NomesColuna(string tableName)
		{
			if (String.IsNullOrEmpty(tableName)) throw new ArgumentNullException(nameof(tableName));

			List<Coluna> details;
			List<string> columnNames = new List<string>();

			if (_TableDetails.TryGetValue(tableName, out details))
			{
				if (details != null && details.Count > 0)
				{
					foreach (Coluna c in details)
					{
						columnNames.Add(c.Name);
					}

					return columnNames;
				}

				throw new Exception("Unable to find primary key for table " + tableName);
			}
			else
			{
				throw new Exception("Table " + tableName + " is not in the tables list");
			}
		}

		public string ScriptProcedures()
		{
			StringBuilder mRetDef = new StringBuilder();
			foreach (Procedure mProc in mProcedures)
			{
				mRetDef.AppendLine("--Function/Procedure: " + mProc.Name + " \n" + mProc.Content + " \n");

			}

			return mRetDef.ToString();
		}

		public string ScriptBanco()
		{
			StringBuilder mRetDef = new StringBuilder();
			StringBuilder mReConst = new StringBuilder();
			foreach (Tabela mTabela in mTabelas)
			{
				mRetDef.AppendLine(mTabela.DefinicaoTabela(false));
				mReConst.AppendLine(mTabela.ChavesTabela(false));
			}

			return mRetDef.ToString() + "\n" + mReConst.ToString();
		}
		/// <summary>
		/// Create a string timestamp from the given DateTime for the database of the instance type.
		/// </summary>
		/// <param name="ts">DateTime.</param>
		/// <returns>A string with timestamp formatted for the database of the instance type.</returns>
		public string Timestamp(DateTime ts)
		{
			switch (_DbType)
			{
				case DbTypes.MsSql:
					return ts.ToString("MM/dd/yyyy hh:mm:ss.fffffff tt");

				case DbTypes.MySql:
					return ts.ToString("yyyy-MM-dd HH:mm:ss.ffffff");

				case DbTypes.PgSql:
					return ts.ToString("MM/dd/yyyy hh:mm:ss.fffffff tt");

				default:
					return null;
			}
		}

		/// <summary>
		/// Sanitize an input string.
		/// </summary>
		/// <param name="val">The value to sanitize.</param>
		/// <returns>A sanitized string.</returns>
		public string SanitizeString(string val)
		{
			if (String.IsNullOrEmpty(val)) return val;

			switch (_DbType)
			{
				case DbTypes.MsSql:
					return MssqlHelper.SanitizeString(val);

				case DbTypes.MySql:
					return MysqlHelper.SanitizeString(val);

				case DbTypes.PgSql:
					return PgsqlHelper.SanitizeString(val);
			}

			throw new Exception("Unknown database type");
		}

		#endregion

		#region Private-Methods

		protected virtual void Dispose(bool disposing)
		{
			if (_Disposed)
			{
				return;
			}

			if (disposing)
			{
				// placeholder
			}

			_Disposed = true;
		}

		private void PopulaConnectionString()
		{
			ConnectionString = "";

			switch (_DbType)
			{
				case DbTypes.MsSql:
					ConnectionString = MssqlHelper.ConnectionString(_ServerIp, _ServerPort, _Username, _Password, _Instance, _DatabaseName);
					break;

				case DbTypes.MySql:
					ConnectionString = MysqlHelper.ConnectionString(_ServerIp, _ServerPort, _Username, _Password, _DatabaseName);
					break;

				case DbTypes.PgSql:
					ConnectionString = PgsqlHelper.ConnectionString(_ServerIp, _ServerPort, _Username, _Password, _DatabaseName);
					break;
			}

			return;
		}

		private void CarregaTabelas()
		{
			lock (_LoadingTablesLock)
			{
				string query = "";
				DataTable result = new DataTable();

				#region Build-Query

				switch (_DbType)
				{
					case DbTypes.MsSql:
						query = MssqlHelper.LoadTableNamesQuery(_DatabaseName);
						break;

					case DbTypes.MySql:
						query = MysqlHelper.LoadTableNamesQuery();
						break;

					case DbTypes.PgSql:
						query = PgsqlHelper.LoadTableNamesQuery();
						break;
				}

				#endregion

				#region Process-Results

				result = Query(query);
				List<string> tableNames = new List<string>();

				if (result != null && result.Rows.Count > 0)
				{
					switch (_DbType)
					{
						case DbTypes.MsSql:
							foreach (DataRow curr in result.Rows)
							{
								tableNames.Add(curr["TABLE_NAME"].ToString());
							}
							break;

						case DbTypes.MySql:
							foreach (DataRow curr in result.Rows)
							{
								tableNames.Add(curr["Tables_in_" + _DatabaseName].ToString());
							}
							break;

						case DbTypes.PgSql:
							foreach (DataRow curr in result.Rows)
							{
								tableNames.Add(curr["tablename"].ToString());
							}
							break;
					}
				}

				if (tableNames != null && tableNames.Count > 0)
				{
					_TableNames = new ListaConcorrente<string>();
					foreach (string curr in tableNames)
					{
						_TableNames.Add(curr);
					}
				}

				#endregion

				return;
			}
		}

		private void CarregaDetalhesTabela()
		{
			lock (_LoadingTablesLock)
			{
				string query = "";
				DataTable result = new DataTable();
				Dictionary<string, List<Coluna>> tableDetails = new Dictionary<string, List<Coluna>>();


				foreach (string currTable in _TableNames)
				{
					#region Gather-Schema

					List<Coluna> columns = new List<Coluna>();
					List<Constraint> mReferrencias = new List<Constraint>();

					switch (_DbType)
					{
						case DbTypes.MsSql:
							query = MssqlHelper.LoadTableColumnsQuery(_DatabaseName, currTable);
							break;

						case DbTypes.MySql:
							query = MysqlHelper.LoadTableColumnsQuery(_DatabaseName, currTable);
							break;

						case DbTypes.PgSql:
							query = PgsqlHelper.LoadTableColumnsQuery(_DatabaseName, currTable);
							break;
					}

					#endregion

					#region Process-Schema

					result = Query(query);
					if (result != null && result.Rows.Count > 0)
					{
						foreach (DataRow currColumn in result.Rows)
						{
							#region Process-Each-Column

							/*
							public bool IsPrimaryKey;
							public string Name;
							public string DataType;
							public int? MaxLength;
							public bool Nullable;
							*/
							Coluna tempColumn = new Coluna();
							int maxLength = 0;

							switch (_DbType)
							{
								case DbTypes.MsSql:
									#region Mssql

									tempColumn.Name = currColumn["COLUMN_NAME"].ToString();
									if (currColumn["CONSTRAINT_NAME"].ToString().StartsWith("PK_")) tempColumn.IsPrimaryKey = true;
									else tempColumn.IsPrimaryKey = false;
									tempColumn.DataType = currColumn["DATA_TYPE"].ToString();
									if (!Int32.TryParse(currColumn["CHARACTER_MAXIMUM_LENGTH"].ToString(), out maxLength)) { tempColumn.MaxLength = null; }
									else tempColumn.MaxLength = maxLength;
									if (String.Compare(currColumn["IS_NULLABLE"].ToString(), "YES") == 0) tempColumn.Nullable = true;
									else tempColumn.Nullable = false;
									break;

								#endregion

								case DbTypes.MySql:
									#region Mysql

									tempColumn.Name = currColumn["COLUMN_NAME"].ToString();
									if (String.Compare(currColumn["COLUMN_KEY"].ToString(), "PRI") == 0) tempColumn.IsPrimaryKey = true;
									else tempColumn.IsPrimaryKey = false;
									tempColumn.DataType = currColumn["DATA_TYPE"].ToString();
									if (!Int32.TryParse(currColumn["CHARACTER_MAXIMUM_LENGTH"].ToString(), out maxLength)) { tempColumn.MaxLength = null; }
									else tempColumn.MaxLength = maxLength;
									if (String.Compare(currColumn["IS_NULLABLE"].ToString(), "YES") == 0) tempColumn.Nullable = true;
									else tempColumn.Nullable = false;
									break;

								#endregion

								case DbTypes.PgSql:
									#region Pgsql

									tempColumn.Name = "\"" + currColumn["column_name"].ToString() + "\"";
									if (String.Compare(currColumn["is_primary_key"].ToString(), "YES") == 0) tempColumn.IsPrimaryKey = true;
									else tempColumn.IsPrimaryKey = false;
									tempColumn.DataType = currColumn["DATA_TYPE"].ToString();
									if (!Int32.TryParse(currColumn["max_len"].ToString(), out maxLength)) { tempColumn.MaxLength = null; }
									else tempColumn.MaxLength = maxLength;
									if (String.Compare(currColumn["IS_NULLABLE"].ToString(), "YES") == 0) tempColumn.Nullable = true;
									else tempColumn.Nullable = false;
									if (string.IsNullOrEmpty( currColumn["column_default"].ToString())) tempColumn.Default = "";
									else tempColumn.Default = currColumn["column_default"].ToString();
									break;

									#endregion
							}

							columns.Add(tempColumn);

							#endregion
						}

						tableDetails.Add(currTable, columns);



						switch (_DbType)
						{
							case DbTypes.MsSql:
								query = "";
								break;

							case DbTypes.MySql:
								query = "";
								break;

							case DbTypes.PgSql:
								query = PgsqlHelper.LoadConstraintQuery(_DatabaseName, currTable);
								break;
						}

						if (!string.IsNullOrEmpty(query))
						{
							result = Query(query);
							if (result != null && result.Rows.Count > 0)
							{
								foreach (DataRow currColumn in result.Rows)
								{
									#region Process-Each-Column


									Constraint tempConstraint = new Constraint();


									switch (_DbType)
									{
										case DbTypes.MsSql:
											#region Mssql


											break;

										#endregion

										case DbTypes.MySql:
											#region Mysql

											break;

										#endregion

										case DbTypes.PgSql:
											#region Pgsql

											tempConstraint.Name = "\"" + currColumn["constraint_name"].ToString() + "\"";
											tempConstraint.ForeignTable = "\"" + currColumn["foreign_table_name"].ToString() + "\"";
											tempConstraint.ForeignColumns = "\"" + currColumn["foreign_column_name"].ToString() + "\"";
											tempConstraint.LocalColumns = "\"" + currColumn["column_name"].ToString() + "\"";
											tempConstraint.Type = currColumn["constraint_type"].ToString();

											break;

											#endregion
									}
									mReferrencias.Add(tempConstraint);
									#endregion
								}
							}
						}
					}
					mTabelas.Add(new Tabela("\"" + currTable + "\"" , columns, mReferrencias));
					#endregion
				}

				#region Replace-Table-Details

				_TableDetails = new ConcurrentDictionary<string, List<Coluna>>();
				foreach (KeyValuePair<string, List<Coluna>> curr in tableDetails)
				{
					_TableDetails.TryAdd(curr.Key, curr.Value);
				}

				#endregion

				return;
			}
		}

		private void CarregaProcedures()
		{

			string query = "";


			#region Build-Query

			switch (_DbType)
			{
				case DbTypes.MsSql:
					query = "";
					break;

				case DbTypes.MySql:
					query = "";
					break;

				case DbTypes.PgSql:
					query = PgsqlHelper.LoadFunctionsDefinitionQuery();
					break;
			}

			#endregion

			#region Process-Results

			if (!string.IsNullOrEmpty(query))
			{
				DataTable result;
				result = Query(query);
				

				if (result != null && result.Rows.Count > 0)
				{
					switch (_DbType)
					{
						case DbTypes.MsSql:

							break;

						case DbTypes.MySql:

							break;

						case DbTypes.PgSql:
							foreach (DataRow curr in result.Rows)
							{
								if(curr["definition"].ToString().ToUpper().IndexOf("AS $FUNCTION$") > 0)
								{
									mProcedures.Add(new Procedure(curr["fname"].ToString(), curr["definition"].ToString()));
								}
							}
							break;
					}
				}
			}

			#endregion

			return;

		}

		private string PreparedFieldname(string s)
		{
			switch (_DbType)
			{
				case DbTypes.MsSql:
					return s;

				case DbTypes.MySql:
					return s;

				case DbTypes.PgSql:
					return "\"" + s + "\"";
			}

			return null;
		}

		private string PreparedStringValue(string s)
		{
			switch (_DbType)
			{
				case DbTypes.MsSql:
					return "'" + MssqlHelper.SanitizeString(s) + "'";

				case DbTypes.MySql:
					return "'" + MysqlHelper.SanitizeString(s) + "'";

				case DbTypes.PgSql:
					// uses $xx$ escaping
					return PgsqlHelper.SanitizeString(s);
			}

			return null;
		}

		private string PreparedUnicodeValue(string s)
		{
			switch (_DbType)
			{
				case DbTypes.MsSql:
					return "N" + PreparedStringValue(s);

				case DbTypes.MySql:
					return "N" + PreparedStringValue(s);

				case DbTypes.PgSql:
					return "U&" + PreparedStringValue(s);
			}

			return null;
		}


		/// <summary>
		/// Execute a query.
		/// </summary>
		/// <param name="query">Database query defined outside of the database client.</param>
		/// <returns>A DataTable containing the results.</returns>
		private DataTable Query(string query)
		{
			if (String.IsNullOrEmpty(query)) throw new ArgumentNullException(query);
			DataTable result = new DataTable();

			if (DebugRawQuery) Console.WriteLine("RawQuery: " + query);

			switch (_DbType)
			{
				case DbTypes.MsSql:
					#region Mssql

					using (SqlConnection conn = new SqlConnection(ConnectionString))
					{
						conn.Open();
						SqlDataAdapter sda = new SqlDataAdapter(query, conn);
						sda.Fill(result);
						conn.Dispose();
						conn.Close();
					}

					break;

				#endregion

				case DbTypes.MySql:
					#region Mysql

					using (MySqlConnection conn = new MySqlConnection(ConnectionString))
					{
						conn.Open();
						MySqlCommand cmd = new MySqlCommand();
						cmd.Connection = conn;
						cmd.CommandText = query;
						MySqlDataAdapter sda = new MySqlDataAdapter(cmd);
						DataSet ds = new DataSet();
						sda.Fill(ds);
						if (ds != null)
						{
							if (ds.Tables != null)
							{
								if (ds.Tables.Count > 0)
								{
									result = ds.Tables[0];
								}
							}
						}

						conn.Close();
					}

					break;

				#endregion

				case DbTypes.PgSql:
					#region Pgsql

					using (NpgsqlConnection conn = new NpgsqlConnection(ConnectionString))
					{
						conn.Open();
						NpgsqlDataAdapter da = new NpgsqlDataAdapter(query, conn);
						DataSet ds = new DataSet();
						da.Fill(ds);

						if (ds != null && ds.Tables != null && ds.Tables.Count > 0)
						{
							result = ds.Tables[0];
						}

						conn.Close();
					}

					break;

					#endregion
			}

			if (DebugResultRowCount)
			{
				if (result != null) Console.WriteLine("RawQuery: returning " + result.Rows.Count + " row(s)");
				else Console.WriteLine("RawQery: returning null");
			}

			return result;
		}

		#endregion

		#region Public-Static-Methods

		/// <summary>
		/// Convert a DateTime to a string formatted for the specified database type.
		/// </summary>
		/// <param name="dbType">The type of database.</param>
		/// <param name="dt">The timestamp.</param>
		/// <returns>A string formatted for use with the specified database.</returns>
		public static string DbTimestamp(DbTypes dbType, DateTime ts)
		{
			switch (dbType)
			{
				case DbTypes.MsSql:
				case DbTypes.PgSql:
					return ts.ToString("MM/dd/yyyy hh:mm:ss.fffffff tt");

				case DbTypes.MySql:
					return ts.ToString("yyyy-MM-dd HH:mm:ss.ffffff");

				default:
					return null;
			}
		}

		/// <summary>
		/// Convert a DateTime to a string formatted for the specified database type.
		/// </summary>
		/// <param name="dbType">The type of database.</param>
		/// <param name="dt">The timestamp.</param>
		/// <returns>A string formatted for use with the specified database.</returns>
		public static string DbTimestamp(string dbType, DateTime ts)
		{
			if (String.IsNullOrEmpty(dbType)) throw new ArgumentNullException(nameof(dbType));
			switch (dbType.ToLower())
			{
				case "mssql":
					return DbTimestamp(DbTypes.MsSql, ts);

				case "mysql":
					return DbTimestamp(DbTypes.MySql, ts);

				case "pgsql":
					return DbTimestamp(DbTypes.PgSql, ts);

				default:
					throw new ArgumentOutOfRangeException(nameof(dbType));
			}
		}

		#endregion
	}
}

